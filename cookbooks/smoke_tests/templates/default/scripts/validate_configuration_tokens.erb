# validate that the cluster inputs are provided in the properties file

require 'rake'
require 'rspec/core/rake_task'
require 'fileutils'
require 'yaml'

# using tokens instead of variable reference in the hash
# to allow for name collision.

token_values = {
    'db_server' => '<%= @db_server %>',
    'db_port' => '<%= @db_port %>',
    'appserver' => '<%= @app_server %>',
    'app_server' => '<%= @app_server %>',
    'search_port' => '<%= @elastic_search_port %>',
    'search_server' => '<%= @search_server %>',
    'messaging_server_port' => '<%= @messaging_server_port %>',
    'engine_server' => '<%= @engine_server %>',
    'cache_server' => '<%= @cache_server %>',
    'messaging_server' => '<%= @messaging_server %>',
    'engine_port' => '<%= @engine_port %>',
    'web_server' => '<%= @web_server %>',
}



# NOTE - passing the string keyed hash instead of variable reference
# to allow name collision.
token_values = {'cache_server' => node[:deploy][:cache_server],
                'db_server' => node[:deploy][:db_server],
                'db_port' => node[:deploy][:db_port],
                'app_server' => node[:deploy][:app_server],
                'search_port' => node[:deploy][:elastic_search_port],
                'search_server' => node[:deploy][:search_server],
                'messaging_server_port' => node[:deploy][:messaging_server_port],
                'messaging_server' => node[:deploy][:messaging_server],
                'engine_server' => node[:deploy][:engine_server],
                'engine_port' => node[:deploy][:engine_port],
                'web_server' => node[:deploy][:web_server],
}

# validation pattern dictionary s constructed from the actual
# 'ultimate.properties'
# via command findstr "{" ultimate.properties
# The list needs to be kep up to date with that file

validation_patterns = %w(
dbserver.host={db_server}
dbserver.port={db_port}
server.engine.host={engine_server}
server.engine.port={engine_port}
app.host={app_server}
cache.host={cache_server}
messaging.host={messaging_server}
search.host={search_server}
webserver.host={web_server}
service.droolz.port={engine_port}
server.application.host={app_server}   )


def validate_properties(local_filename, token_values, validation_patterns)

  token_values.each do |token, entry|
    matcher = Regexp.new('(\{' + token + '\})', Regexp::MULTILINE)
    validation_patterns.each do |contents|
      if matcher.match(contents)
        # build the Regular expression negative lookahead pattern
        # to detect settings without or with wrong values
        entry_miss = '(?!' + entry + ')'
        contents.gsub!(matcher, entry_miss)
      end
    end
  end
  $stderr.puts "Validation patterns:\n" + validation_patterns.to_yaml if $DEBUG

  # prune commented lines
  lines = []
  File.open(local_filename, 'r+') do |file|
    file.each do |line|
      lines << line unless line =~ /^#/
    end
  end

  contents = lines.join("\n")
  validation_patterns.each do |validation_expr|
    matcher = Regexp.new(validation_expr, Regexp::MULTILINE)
    if matcher.match(contents)
      $stderr.puts "Mismatch with #{validation_expr}" if $DEBUG
    end
  end
  return
end

task :default do

$DEBUG = false

mule_configuration_dir='/opt/mule/configuration'
properties_filename = "#{mule_configuration_dir}/ultimate.properties"
properties_backup_filename = "#{properties_filename}.BAK"

validate_properties(local_filename, token_values, validation_patterns)

end