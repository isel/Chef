require 'rake'
require 'fileutils'
require 'json'
require 'yaml'

require '<%= @binaries_directory %>/CI/BuildScripts/Cloud/deployment'
require '<%= @binaries_directory %>/CI/BuildScripts/Helpers/process'
require '<%= @binaries_directory %>/CI/BuildScripts/Helpers/configuration'
require '<%= @binaries_directory %>/CI/BuildScripts/Helpers/io_utils'

source_directory = '<%= @source_directory %>'
staging_directory = '<%= @staging_directory %>'
install_directory = '<%= @install_directory %>'

service_assembly_filename = '<%= @service_assembly_filename %>'
service_display_name = '<%= @service_display_name %>'
service_app_config = "#{service_assembly_filename}.config"
service_app_config_full_path = "#{staging_directory}/#{service_app_config}"
service_user = 'NETWORK SERVICE'

installutil_command_fullpath = 'c:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe'
install_log = 'service_install.log'
uninstall_log = 'service_uninstall.log'

service_change_timeout = <%= @service_change_timeout %>
service_launch_timeout = <%= @service_launch_timeout %>
service_query_timeout = <%= @service_query_timeout %>

settings = JSON.parse(File.read('<%= node['deployment_settings_json'] %>'))

cache_server = '<%= @cache_server %>'
db_server = '<%= @db_server %>'
database_port = settings['database_port']
messaging_port = settings['messaging_port']
messaging_server = '<%= @messaging_server %>'
platform_event_router_port = settings[ 'platform_event_router_port' ]

if `sc.exe query "#{service_display_name}"`.match Regexp.new("SERVICE_NAME\s*+:\s+#{service_display_name}", Regexp::IGNORECASE)

Helpers::Process.new.run('wait for service to stop', service_change_timeout) do
begin
system("sc.exe stop \"#{service_display_name}\" >NUL")
rescue
false
end
end

Dir.chdir(install_directory)

FileUtils.rm_f(uninstall_log) if File.exists?(uninstall_log)


Helpers::Process.new.run('wait for .net to uninstall service', service_change_timeout) do
begin
system("#{installutil_command_fullpath} \"/LogFile=#{uninstall_log}\" /uninstall  #{service_assembly_filename}  >NUL  2>NUL" )
rescue
false
end
end


Dir.chdir(ENV['TEMP'])

if Dir.exists? (install_directory)
FileUtils.rm_rf(install_directory)
end

if Dir.exists? (staging_directory)
FileUtils.rm_rf(staging_directory)
end


# unable to inspect the assembly presence in the GAC - gacutil.exe is no longer part of .NET redistributable
# http://stackoverflow.com/questions/2660355/net-4-0-has-a-new-gac-why

puts "#{service_display_name} has been uninstalled from the system"

else

puts "#{service_display_name} was not installed on the system"

end

if File.exist?(staging_directory)
puts "#{service_display_name} has already been configured"
else

if !File.exist?(source_directory)
puts 'Source directory is missing'
exit 4
end

FileUtils.mkdir_p(staging_directory)
if !File.exist?(staging_directory)
puts 'Staging directory cannot be created'
exit 8
end

Dir.chdir(source_directory)

FileUtils.cp_r("#{source_directory}/.", staging_directory)

Dir.chdir(staging_directory)

if !File.exist?(service_app_config)
puts 'Event Router Service configuration file is missing'
exit 16
end
end

Dir.chdir(staging_directory)


Helpers::change_app_setting(service_app_config, 'MessagingServer.Uri', "http://#{messaging_server}:#{messaging_port}")
Helpers::change_app_setting(service_app_config, 'ConnectionString', "Server=#{db_server}:#{database_port}")


IOUtils::replace_text_in_file(service_app_config_full_path, '
<host name="localhost"', "
<host name=\"#{cache_server}\"")
IOUtils::replace_text_in_file(service_app_config_full_path, '<\/hosts>', '</hosts>
<securityProperties mode="None" protectionLevel="None"/>')

Helpers::Process.new.run('Verify dependency service is running', service_query_timeout) do
begin
`sc.exe query msmq"`.match Regexp.new('STATE\s+:\s+\d+\s+RUNNING', Regexp::IGNORECASE)
rescue
false
end
end

FileUtils.mkdir_p(install_directory)
FileUtils.cp_r(staging_directory +"/.", install_directory)

Dir.chdir(install_directory)
FileUtils.rm_f(install_log) if File.exists?(install_log)
Helpers::Process.new.run('wait for .net to install service', service_change_timeout) do

begin
system("#{installutil_command_fullpath} /InstallStateDir=\"#{install_directory}\" \"/LogFile=#{install_log}\"  #{service_assembly_filename}  >NUL  2>NUL")
# need to inspect the output.
rescue
false
end
end


puts 'Configure Windows security settings'
url_expression = "http://+:#{platform_event_router_port}/EventRouter/"

urlacl_settings = []
urlacl_settings_found = false

`netsh http show urlacl`.split(/\n/).each do
|line|

if line =~ /Reserved URL/ && line =~ Regexp.new(platform_event_router_port)
urlacl_settings_found = true
end
if urlacl_settings_found
if line =~ /^\s+$/
urlacl_settings_found = false
end
end
if urlacl_settings_found
urlacl_settings << line
end

end

system("netsh http delete urlacl url=#{url_expression} >NUL 2>NUL") if urlacl_settings.size != 0
system("netsh.exe http add urlacl url=#{url_expression} user=\"#{service_user}\" >NUL 2>NUL")

system("sc.exe start \"#{service_display_name}\" >NUL")

Helpers::Process.new(service_change_timeout).run('wait for the service state change', service_launch_timeout) do
begin
`sc.exe query "#{service_display_name}"`.match Regexp.new('STATE\s+:\s+\d+\s+RUNNING', Regexp::IGNORECASE)
rescue
false
end
end
puts 'Service is running'
