require '<%= @binaries_directory %>/CI/BuildScripts/Helpers/configuration'
require '<%= @binaries_directory %>/CI/BuildScripts/Helpers/io_utils'

def execute(commandline)
  command_response = []
  begin
    IO::popen(commandline) do |iostream|
      line = ''
      until line.nil?
        command_response << line
        line = iostream.gets
      end
    end
  rescue => e
    raise 'cannot execute command ' + e.to_s
  end
  # remove edge blank lines
  command_response.join("\n").gsub(/\r?\n?$/, '').gsub(/^\r?\n?/, '')
end

def sc_query(service_display_name)
  result = execute("sc query \"#{service_display_name}\"")
  result.match Regexp.new('STATE\s+:\s+\d+\s+RUNNING', Regexp::IGNORECASE)
end

service_display_name = '<%= @service_display_name %>'
launch_wait_timeout = <%= @launch_wait_timeout  %>
timeout = 30
cumulative_wait_time = 0

service_status_confirmed = nil

while cumulative_wait_time < launch_wait_timeout

  service_status_confirmed = sc_query(service_display_name)
  break if service_status_confirmed

  cumulative_wait_time = cumulative_wait_time + timeout
  $stderr.puts "Service #{service_display_name} is not started after  #{cumulative_wait_time} sec. Retry after #{timeout} sec."
  sleep timeout
end
unless service_status_confirmed
  $stderr.puts "Service #{service_display_name} is not started. Reporting the error."
  exit 1
end
