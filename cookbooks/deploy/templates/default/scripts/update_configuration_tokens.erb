# replace tokens in mule properties file

require 'fileutils'
require 'yaml'

$DEBUG = false

mule_configuration_dir='/opt/mule/configuration'
properties_filename = "#{mule_configuration_dir}/ultimate.properties"
properties_backup_filename = "#{properties_filename}.BAK"


# using tokens instead of variable reference in the hash
# to allow for name collision.

token_values = {
    'db_server' => '<%= @db_server %>',
    'db_port' => '<%= @db_port %>',
    'appserver' => '<%= @app_server %>',
    'app_server' => '<%= @app_server %>',
    'search_port' => '<%= @elastic_search_port %>',
    'search_server' => '<%= @search_server %>',
    'messaging_server_port' => '<%= @messaging_server_port %>',
    'engine_server' => '<%= @engine_server %>',
    'cache_server' => '<%= @cache_server %>',
    'messaging_server' => '<%= @messaging_server %>',
    'engine_port' => '<%= @engine_port %>',
    'web_server' => '<%= @web_server %>',
}


def update_properties(local_filename, token_values)
  f = File.open(local_filename, 'r+'); contents = f.read; f.close
  token_values.each do |token, entry|
    matcher = Regexp.new('(\{' + token + '\})', Regexp::MULTILINE)
    while matcher.match(contents) # multiline ?
      $stderr.puts "Will replace #{matcher.source} with #{entry}"
      contents=contents.gsub(matcher, entry)
    end
  end
  File.open(local_filename, 'r+') { |f| f.puts contents }
end

# replace tokens in mule properties file
if File.exists?(mule_configuration_dir)

  if !File.exists?(properties_backup_filename)
    FileUtils.cp(properties_filename, properties_backup_filename)
    $stderr.puts  "properties file backed up"
  else
    $stderr.puts  "backup already exists: #{properties_backup_filename}"
  end
  update_properties(properties_filename, token_values)
  $stderr.puts  "Properties updated"
else
  $stderr.puts  "Directory does not exist #{mule_configuration_dir}"
end
