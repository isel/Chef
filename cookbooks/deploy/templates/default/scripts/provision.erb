require 'rake'
require '/DeployScripts/CI/BuildScripts/Helpers/configuration'
require '/DeployScripts/CI/BuildScripts/Helpers/io_utils'
require '/DeployScripts/CI/BuildScripts/Helpers/mongo'


exe = '/Provision/bin/UltimateSoftware.Provisioning.Runner.exe'
config = "#{exe}.config"

FileUtils.remove_dir('/Provision', true)
FileUtils.mkdir_p('/Provision')

FileUtils.cp_r('/DeployScripts/Provision/.', '/Provision/bin')
FileUtils.cp_r('/DeployScripts/ProvisionData/.', '/Provision/bin')
FileUtils.cp_r('/DeployScripts/Images', '/Provision')
FileUtils.cp_r('/DeployScripts/uiml', '/Provision')

Helpers::change_app_setting(config, "ConnectionString", "Server=<%= @db_server %>:<%= @sarmus_port %>")
Helpers::change_app_setting(config, "EntityFramework.ModelFolder", "C:\\WebSites\\Models\\")
IOUtils::replace_text_in_file(config, '<%= '<host name="localhost"' %>', "<%= '<host name=\"' %><%= @cache_server %>\"")
IOUtils::replace_text_in_file(config, '<\/hosts>', '</hosts><securityProperties mode="None" protectionLevel="None"/>')

Helpers::drop_all_databases("<%= @db_server %>", "<%= @sarmus_port %>")

Dir.chdir('/Provision/bin')

def import_data(tenant, input_file)
  model = 'ultipro2'
  puts "running provisioning for model: #{model} tenant: #{tenant} input file: #{input_file}"
  success = system "#{exe} -model #{model} -tenant #{tenant} -data \"#{input_file}\""
  exit_code = $?
  puts "provisioning exit code: #{exit_code}"
  if success
    puts "provisioning #{File.basename(input_file)} successful"
  else
    raise "Error provisioning #{File.basename(input_file)}. Exit code: #{exit_code}"
  end
end

import_data('importer', 'c:\Provision\bin\Models.xlsx')
import_data('importer', 'c:\Provision\bin\VGC - SHARED.xlsx')
import_data('VGC', 'c:\Provision\bin\VGC - HCM.xlsx')
