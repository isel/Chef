require 'rake'
require '<%= node['binaries_directory'] %>/CI/BuildScripts/Helpers/configuration'
require '<%= node['binaries_directory'] %>/CI/BuildScripts/Helpers/io_utils'
require '<%= node['binaries_directory'] %>/CI/BuildScripts/Helpers/mongo'
require '<%= node['binaries_directory'] %>/CI/BuildScripts/Helpers/pim_publisher'


exe = '/Provision/bin/UltimateSoftware.Provisioning.Runner.exe'
config = "#{exe}.config"

if Dir.exist?('/Provision') && '<%= @force_provision %>' != 'true'
  puts 'Deployment has already been provisioned'
  exit
end

puts 'Provisioning deployment'

FileUtils.remove_dir('/Provision', true)
FileUtils.mkdir_p('/Provision')

FileUtils.cp_r('<%= node['binaries_directory'] %>/Provision/.', '/Provision/bin')
FileUtils.cp_r('<%= node['binaries_directory'] %>/Models', '/Provision')
FileUtils.cp_r('<%= node['binaries_directory'] %>/Images', '/Provision')
FileUtils.cp_r('<%= node['binaries_directory'] %>/uiml', '/Provision')
FileUtils.cp_r('<%= node['binaries_directory'] %>/Workflow.Activities.Compass', '/Provision')

FileUtils.cp_r('<%= node['binaries_directory'] %>/Provisioning/Legacy/.', '/Provision/bin')

Helpers::change_app_setting(config, "ConnectionString", "Server=<%= @db_server %>:<%= @sarmus_port %>")
Helpers::change_app_setting(config, "EntityFramework.ModelFolder", "C:\\Provision\\Models\\,C:\\Provision\\Models\\Tests\\")
Helpers::change_app_setting(config, "ImportFlowRoot", "C:\\Provision\\Workflow.Activities.Compass\\")

IOUtils::replace_text_in_file(config, '<\/hosts>', '</hosts><securityProperties mode="None" protectionLevel="None"/>')

Helpers::drop_all_databases("<%= @db_server %>", "<%= @sarmus_port %>")

Dir.chdir('/Provision/bin')

def import_data(exe, tenant, input_file)
  puts "running provisioning for tenant: #{tenant} input file: #{input_file}"
  success = system "#{exe} -tenant #{tenant} -data \"#{input_file}\""
  exit_code = $?
  puts "provisioning exit code: #{exit_code}"
  if success
    puts "provisioning #{File.basename(input_file)} successful"
  else
    raise "Error provisioning #{File.basename(input_file)}. Exit code: #{exit_code}"
  end
end

tenant = '<%= @tenant %>'

if tenant == 'VGC'
  #import_data(exe, 'importer', 'c:\Provision\bin\Models.xlsx')
  #import_data(exe, 'importer', 'c:\Provision\bin\VGC - SHARED.xlsx')
  #import_data(exe, 'VGC', 'c:\Provision\bin\VGC - HCM.xlsx')
else
  import_data(exe, 'importer', 'c:\Provision\bin\Models.xlsx')
  import_data(exe, 'importer', 'c:\Provision\bin\PayrollEngine.xlsx')

  sleep 12*60

  engine_PIM = File.read('c:/Provision/bin/HCM.entity_json')
  Helpers::PIMPublisher.new.publish_entity('<%= @app_server %>', engine_PIM)

  import_data(exe, 'PENG', 'c:\Provision\bin\Rules.xlsx')
end

if tenant == 'VGC'
  puts 'Publishing pim'
  username = 'test@test.com'
  password = '@Password01'
  authentication_url = 'http://<%= @app_server %>:81/httpIssue.svc/Authenticate/?realm=http://localhost/RP&tenantid=<%= @tenant %>'

  # copy files to c:\PIM_Publishing
  FileUtils.remove_dir('/PIM_Publishing', true)
  FileUtils.mkdir_p('/PIM_Publishing')

  FileUtils.cp_r('<%= node['pims_directory'] %>/pims/.', '/PIM_Publishing/pims')
  FileUtils.cp_r('<%= node['pims_directory'] %>/plugins/.', '/PIM_Publishing/plugins')
  FileUtils.cp_r('<%= node['pims_directory'] %>/vendorbin/.', '/PIM_Publishing/vendorbin')

  files = FileList["/PIM_Publishing/vendorbin/**/*.jar"].
    include("/PIM_Publishing/plugins/plugins/**/com.ultimatesoftware.publish_*.jar")

  args = "-a \"#{authentication_url}\" -u \"#{username}\" -p \"#{password}\" -s \"http://<%= @app_server %>\" -m \"/PIM_Publishing/pims\""
  class_path = files.map {|f| "#{f}:" }.join[0..-2]
  cmd = "/jre/bin/java -classpath #{class_path} com.ultimatesoftware.publish.MainPublisher #{args}"

  puts "command: #{cmd}"
  puts `#{cmd}`
  puts "cmd returned: #{$?}"
  raise "Error publishing pims: #{$?}" unless $?.success?
end
